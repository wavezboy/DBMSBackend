generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

  
}

model User {
  id       String   @id @default(uuid())
  imageId String
  email    String   @unique
  password String
  firstName String
  lastName String
  role     Role
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

// Table for storing information about local governments
model LocalGovernment {
  id    String @id @default(cuid())
  name  String
  towns Town[]
  schools School[]
}

// Table for storing information about towns within each local government
model Town {
  id                String  @id @default(cuid())
  name              String
  localGovernmentId String
  localGovernment   LocalGovernment @relation(fields: [localGovernmentId], references: [id])
  schools           School[]
}

// Table for storing information about schools within each town
model School {
  id                String  @id @default(cuid())
  specialId         String  @unique
  name              String
  address           String
  localGovernmentId String
  townId            String
  localGovernment   LocalGovernment @relation(fields: [localGovernmentId], references: [id])
  town              Town            @relation(fields: [townId], references: [id])
  teachers          Teacher[]
  students          Student[]
}



// Table for storing information about students
model Student {
   id                String  @id @default(cuid())
  studentId      String    @unique
  firstName      String
  lastName       String
  imageId        String
  parentsOrGuidians Json
  addresses       String[]
  dateOfBirth    DateTime
  gender         String
  schoolId       String
  class        String
  previousClasses String[]
  results        Result[]
  school              School            @relation(fields: [schoolId], references: [id])
}

// Table for storing information about teachers
model Teacher {
   id                String  @id @default(cuid())
  teacherId     String   @unique
  firstName     String
  lastName      String
  imageId       String
  currentSchoolId String
  addresses String[]
  currentSchool School   @relation(fields: [currentSchoolId], references: [id])
  isActive      Boolean
  pastSchools   Json
  isPrincipal   Boolean
  isHeadmaster Boolean[]
}

// Table for storing the results of students for each term
model Result {
  id          String  @id @default(cuid())
  studentName String
  studentId   String
  class       String
  term        String
  year        Int
  details     Json
  student     Student @relation(fields: [studentId], references: [id])
}
